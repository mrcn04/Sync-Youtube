<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Youtube Sync</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <style>
         * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font: 14px Helvetica, Arial; }
        form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
        form input { border: 0; padding: 14px; width: 90%; margin-right: .5%; }
        form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 13px; }
        #messages { list-style-type: none; margin: 0; padding: 0;}
        #messages li { padding: 10px 10px; }
        #messages li:nth-child(odd) { background: #eee; }
    </style>
</head>
<body>

    <!-- NavBar -->
    <nav class="realhome-nav">
        <a class="realhome-nav-a" href="#" style="font-size: 18px;"><strong>Youtube Sync</strong></a>
        <a class="realhome-nav-a" href="#">Button 1</a>
        <a class="realhome-nav-a" href="#">Button 2</a>
        <a class="realhome-nav-a" href="#">Button 3</a>
        <a class="realhome-nav-a" href="#">Button 4</a>
    </nav>

    <div class="div">
    <div>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
        <div id="player"></div>

        <!-- Buttons and progress bar -->
        <div class="playercontrol">
                <button id="playVideo" type="button" class="btn btn-default" aria-label="Left Align">
                        <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
                </button>
                <button id="pauseVideo" type="button" class="btn btn-default" aria-label="Left Align">
                         <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
                </button>

                <div id="progressBar">
                    <div id="line"></div>
                    <div id="square"></div>
                </div>
            </div>

        </div>

        <div class="chat">
                <!-- Chat form -->
            <h1 id="chatbox">Chatbox</h1>
            <ul id="messages"></ul>
            <form action="">
            <input id="m" autocomplete="off" placeholder="Type here..."/><button>Send</button>
            </form>
        </div>
    </div>
       

        <!-- Progress bar function -->
        <script>

            function initializeBtns() {
                var playVideoBtn = $('#playVideo');
                var pauseVideoBtn = $('#pauseVideo');
                playVideoBtn.click(function(event){
                    mydata = {state: 'play', time: player.getCurrentTime()};
                    socket.emit('event', mydata);
                    console.log("vlasf");
                    playVideo();
                });
                
                pauseVideoBtn.click(function(event){
                    mydata = {state: 'pause', time: player.getCurrentTime()};
                    socket.emit('event', mydata);
                    console.log(seekTo);
                    pauseVideo();
                });
            }

            function progressBarLoop() {
                var progressBar = $('#progressBar');
                var progressSquare = $('#square');
                var videoLength = player.getDuration();
                progressBar.click(function(event){
                    var divOffset = $(this).offset();
                    var seekTo = (event.pageX - divOffset.left)/600*videoLength;
                    var mydata = {state: 'seekTo', time: seekTo}
                    socket.emit('event', mydata);
                    player.seekTo(seekTo);
                });
                setInterval(function(){
                    if (player == null || progressBar == null){
                        return;
                    }
                    var fraction = player.getCurrentTime()/player.getDuration()*100;
                    progressSquare.css("left", fraction.toString() + "%");
                }, 200);
            }
        </script>

        <script>
          // 2. This code loads the IFrame Player API code asynchronously.
          var tag = document.createElement('script');
    
          tag.src = "https://www.youtube.com/iframe_api";
          var firstScriptTag = document.getElementsByTagName('script')[0];
          firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    
          // 3. This function creates an <iframe> (and YouTube player)
          //    after the API code downloads.
          var player;
          function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
              height: '480',
              width: '720',
              videoId: 'tAfi0X-cJag',
              events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
              },
              playerVars: {
                  'controls':1,
                  'disablekb':1,
                  'modestbranding':1,
                  'rel':0,
                  'showinfo':1
              }
            });
          }
    
          // 4. The API will call this function when the video player is ready.
          function onPlayerReady(event) {
            initializeBtns();
            progressBarLoop();
            event.target.playVideo();
          }
    
          // 5. The API calls this function when the player's state changes.
          //    The function indicates that when playing a video (state=1),
          //    the player should play for six seconds and then stop.
          var done = false;
          function onPlayerStateChange(event) {
              console.log(event.target.getCurrentTime());
            if (event.data == YT.PlayerState.PLAYING && !done) {
              setTimeout(stopVideo, 3000);
              done = true;
            }
          }
          function playVideo() {
              player.playVideo();
          }
          function stopVideo() {
            player.stopVideo();
          }
          function pauseVideo() {
              player.pauseVideo();
          }
          function seekTo(){
              player.seekTo();
          }
        </script>   
       
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    
    <script src="/socket.io.js"></script>
    <script>
        var socket = io();
        var un = prompt("What's your username?");    
       
        socket.on('event', function(msg) {
            if(msg.state == 'play'){
                
                player.playVideo();
            } else if (msg.state == 'pause') {
                player.pauseVideo();
            } else if (msg.state == 'seekTo'){
                if (Math.abs(msg.time - player.getCurrentTime()) > 1){
                    player.seekTo();
                }
            }
        });

        $(function () {
            var COLORS = [
                '#e21400', '#91580f', '#f8a700', '#f78b00',
                '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
                '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
            ];
    
            $('form').submit(function(){
            socket.emit('chat message', $('#m').val());
            $('#m').val('');
            return false;
            });
            socket.on('chat message', function(msg){ 
                var li = $("<li></li>");
                var span = $("<span></span>").css('color', getUsernameColor(un));
                span.addClass("userNameSpan");
                
                $('#messages').append($(li).text(msg));
                $(li).prepend($(span).text(un));
           
            });
            socket.emit('new user', un);

            function getUsernameColor (un) {
                // Compute hash code
                var hash = 7;
                for (var i = 0; i < un.length; i++) {
                    hash = un.charCodeAt(i) + (hash << 5) - hash;
                }
                // Calculate color
                var index = Math.abs(hash % COLORS.length);
                return COLORS[index];
            }

        });
        socket.on('connection2', function(msg){
            $('#messages').append($('<li style="font-style:italic;">').text(msg));
        });

    </script>
</body>
</html>